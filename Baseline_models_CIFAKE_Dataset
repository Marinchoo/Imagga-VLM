import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
from pathlib import Path
import torch.optim as optim
import mlflow
import mlflow.pytorch
import matplotlib.pyplot as plt

# Dataset setup
data_dir = Path(".")
transform = transforms.Compose([
    transforms.Resize((64, 64)),
    transforms.ToTensor()
])

train_dataset = datasets.ImageFolder(data_dir / "train", transform=transform)
test_dataset = datasets.ImageFolder(data_dir / "test", transform=transform)

train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True, drop_last=True)
test_loader = DataLoader(test_dataset, batch_size=16, shuffle=False, drop_last=True)

num_classes = len(train_dataset.classes)
input_size = 64 * 64 * 3
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Model 1: Linear model (no encoder)
class LinearModel(nn.Module):
    def __init__(self, input_size, num_classes):
        super().__init__()
        self.fc = nn.Linear(input_size, num_classes)
    def forward(self, x):
        x = x.view(x.size(0), -1)
        return self.fc(x)

# Model 2: Small Neural Net (2 layers)
class SmallNN(nn.Module):
    def __init__(self, input_size, num_classes, hidden_size=256):
        super().__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.fc2 = nn.Linear(hidden_size, num_classes)
    def forward(self, x):
        x = x.view(x.size(0), -1)
        x = F.relu(self.fc1(x))
        return self.fc2(x)

# Model 3: 4-layer MLP
class MLP4_BN(nn.Module):
    def __init__(self, input_size, num_classes, dropout_rate=0.3):
        super().__init__()
        self.fc1 = nn.Linear(input_size, 1024)
        self.bn1 = nn.BatchNorm1d(1024)
        self.fc2 = nn.Linear(1024, 512)
        self.bn2 = nn.BatchNorm1d(512)
        self.fc3 = nn.Linear(512, 256)
        self.bn3 = nn.BatchNorm1d(256)
        self.fc4 = nn.Linear(256, num_classes)
        self.dropout = nn.Dropout(dropout_rate)

    def forward(self, x):
        x = x.view(x.size(0), -1)
        x = self.dropout(F.relu(self.bn1(self.fc1(x))))
        x = self.dropout(F.relu(self.bn2(self.fc2(x))))
        x = self.dropout(F.relu(self.bn3(self.fc3(x))))
        return self.fc4(x)

# Training helpers
def train_epoch(model, dataloader, criterion, optimizer, device):
    model.train()
    running_loss, correct, total = 0, 0, 0
    for inputs, labels in dataloader:
        inputs, labels = inputs.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item() * inputs.size(0)
        _, predicted = outputs.max(1)
        correct += predicted.eq(labels).sum().item()
        total += labels.size(0)

    return running_loss / total, correct / total

def eval_model(model, dataloader, criterion, device):
    model.eval()
    running_loss, correct, total = 0, 0, 0
    with torch.no_grad():
        for inputs, labels in dataloader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            running_loss += loss.item() * inputs.size(0)
            _, predicted = outputs.max(1)
            correct += predicted.eq(labels).sum().item()
            total += labels.size(0)
    return running_loss / total, correct / total

# Setup
epochs = 5
learning_rate = 1e-3
criterion = nn.CrossEntropyLoss()

models = {
    "Linear": LinearModel(input_size, num_classes).to(device),
    "SmallNN": SmallNN(input_size, num_classes).to(device),
    "MLP4_BN": MLP4_BN(input_size, num_classes).to(device)
}

if mlflow.active_run():
    mlflow.end_run()

results = {}

# Training loop
for name, model in models.items():
    with mlflow.start_run(run_name=name):
        print(f"\nTraining {name}...")
        optimizer = optim.Adam(model.parameters(), lr=learning_rate)

        mlflow.log_param("model_name", name)
        mlflow.log_param("learning_rate", learning_rate)
        mlflow.log_param("epochs", epochs)

        train_losses, test_losses = [], []
        train_accs, test_accs = [], []

        for epoch in range(epochs):
            train_loss, train_acc = train_epoch(model, train_loader, criterion, optimizer, device)
            test_loss, test_acc = eval_model(model, test_loader, criterion, device)

            # Save metrics
            train_losses.append(train_loss)
            test_losses.append(test_loss)
            train_accs.append(train_acc)
            test_accs.append(test_acc)

            # Log to MLflow
            mlflow.log_metric("train_loss", train_loss, step=epoch)
            mlflow.log_metric("train_accuracy", train_acc, step=epoch)
            mlflow.log_metric("test_loss", test_loss, step=epoch)
            mlflow.log_metric("test_accuracy", test_acc, step=epoch)

            print(
                f"Epoch {epoch+1}/{epochs} - "
                f"Train loss: {train_loss:.4f}, Train acc: {train_acc:.4f} | "
                f"Test loss: {test_loss:.4f}, Test acc: {test_acc:.4f}"
            )

        example_input = torch.randn(1, 3, 64, 64).to(device)
        mlflow.pytorch.log_model(model, artifact_path="models")

        results[name] = {
            "train_loss": train_losses,
            "test_loss": test_losses,
            "train_acc": train_accs,
            "test_acc": test_accs
        }

# Plotting results
plt.figure(figsize=(10,5))
for name, data in results.items():
    plt.plot(data["train_loss"], label=f"{name} Train Loss")
    plt.plot(data["test_loss"], label=f"{name} Test Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.title("Loss per Epoch for the baseline models")
plt.legend()
plt.grid(True)
plt.savefig("loss_plot.png", dpi=300)
plt.close()

plt.figure(figsize=(10,5))
for name, data in results.items():
    plt.plot(data["train_acc"], label=f"{name} Train Acc")
    plt.plot(data["test_acc"], label=f"{name} Test Acc")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.title("Accuracy per epoch for the baseline models")
plt.legend()
plt.grid(True)
plt.savefig("accuracy_plot.png", dpi=300)
plt.close()
